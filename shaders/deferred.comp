#version 450

#include "yave.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform Camera {
	mat4 inv_matrix;
	vec3 position;
} camera;

layout(set = 0, binding = 4) readonly buffer InBuffer {
	uint count;
	uint directional_count;
	uint padding[2];

	Light lights[];
} lights;


layout(rgba16f, set = 0, binding = 5) uniform writeonly image2D out_color;




vec4 plan(vec3 p0, vec3 p1, vec3 p2) {
	vec3 n = normalize(cross(p0 - p1, p2 - p1));
	return vec4(-n, dot(n, p1));
}

Frustum build_group_frustum() {
	vec3 top_left = unproject_ndc(vec3(-1, 1, -1), camera.inv_matrix);
	vec3 bot_left = unproject_ndc(vec3(-1, -1, -1), camera.inv_matrix);
	vec3 bot_right = unproject_ndc(vec3(1, -1, -1), camera.inv_matrix);

	vec3 x_step = (bot_right - bot_left) / gl_NumWorkGroups.x;
	vec3 y_step = (top_left - bot_left) / gl_NumWorkGroups.y;

	vec3 tile_bot_left  = bot_left + x_step *  gl_WorkGroupID.x      + y_step *  gl_WorkGroupID.y;
	vec3 tile_bot_right = bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step *  gl_WorkGroupID.y;
	vec3 tile_top_left  = bot_left + x_step *  gl_WorkGroupID.x      + y_step * (gl_WorkGroupID.y + 1);
	vec3 tile_top_right = bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step * (gl_WorkGroupID.y + 1);

	vec3 cam_pos = camera.position;

	Frustum frustum;
	frustum.planes[0] = plan(cam_pos, tile_top_left, tile_bot_left);
	frustum.planes[1] = plan(cam_pos, tile_bot_right, tile_top_right);
	frustum.planes[2] = plan(cam_pos, tile_top_right, tile_top_left);
	frustum.planes[3] = plan(cam_pos, tile_bot_left, tile_bot_right);

	return frustum;
}

uvec2 dispatch_range(uint num) {
	uint thread_count = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	uint range = 1 + (num / thread_count);
	uint begin = min(gl_LocalInvocationIndex * range, num);
	uint end = min(begin + range, num);
	return uvec2(begin, end);
}







vec3 group_color() {
	ivec2 coord = ivec2(gl_WorkGroupID.xy);
	return vec3(noise(coord), noise(coord.yx), noise(-coord));
}

float load_color(uint light_count) {
	if(light_count == 2) {
		return 1.0;
	} else if(light_count == 1) {
		return 0.5f;
	}
	return 0.0f;
	//return (light_count) / float(lights.count + lights.directional_count+ 1);
}







float attenuation(float distance, float radius) {
	float x = min(distance, radius);
	return sqr(1.0 - sqr(sqr(x / radius))) / (sqr(x) + 1.0);
}

float brdf(vec3 normal, vec3 light_dir, vec3 view_dir) {
	float lambert = saturate(dot(normal, light_dir));

	vec3 half_vec = normalize(light_dir + view_dir);
	float phong = pow(saturate(dot(normal, half_vec)), 32.0);

	return lambert + phong;
}



vec3 fetch_normal(sampler2D normal_tex, ivec2 coord) {
	return texelFetch(normal_tex, coord, 0).xyz * 2.0 - vec3(1.0);
}



//#define DEBUG
#define LIGHT_ONLY

#define MAX_LIGHTS 128

shared uint tile_lights[MAX_LIGHTS];
shared uint tile_light_count;

void cull_lights() {
	if(gl_LocalInvocationIndex == 0) {
		tile_light_count = 0;
	}

	barrier();
	{
		Frustum tile_frustum = build_group_frustum();
		uvec2 range = dispatch_range(lights.count);

		for(uint i = range.x; i != range.y; ++i) {
			if(is_inside_4(tile_frustum, lights.lights[i].position, lights.lights[i].radius)) {
				uint light_index = atomicAdd(tile_light_count, 1);
				tile_lights[light_index] = i;
			}
		}
	}
	barrier();
}

void main() {
	cull_lights();

	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec3 acc = vec3(0.0);
	
	float depth = texelFetch(in_depth, coord, 0).x;

#ifndef LIGHT_ONLY
	vec4 albedo = texelFetch(in_color, coord, 0);
#else
	vec4 albedo = vec4(1.0);
#endif

	uint light_count = 0;

	if(depth < 1) {
		vec3 normal = fetch_normal(in_normal, coord);

		vec3 world_pos = unproject(uv, depth, camera.inv_matrix);
		vec3 view_dir = normalize(camera.position - world_pos);

		for(uint i = 0, end = tile_light_count; i != end; ++i, ++light_count) {
			Light light = lights.lights[tile_lights[i]];

			vec3 light_dir = world_pos - light.position;
			float distance = length(light_dir);
			light_dir /= distance;
			float att = attenuation(distance, light.radius);

			acc += light.color * att * albedo.xyz * brdf(normal, light_dir, view_dir);
		}

		for(uint i = lights.count, end = lights.count + lights.directional_count; i != end; ++i, ++light_count) {
			Light light = lights.lights[i];
			acc += light.color * albedo.xyz * brdf(normal, light.position, view_dir);
		}
	}

#ifdef DEBUG
	imageStore(out_color, coord, vec4(load_color(light_count)));
#else
	imageStore(out_color, coord, vec4(acc, 1.0));
#endif
}


