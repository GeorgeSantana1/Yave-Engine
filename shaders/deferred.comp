#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform InvMatrix {
	mat4 matrix;
} inv;

layout(rgba8, set = 2, binding = 0) uniform writeonly image2D out_color;


struct Light {
	vec3 color;
	float radius;
	vec3 position;
	float padding1;
};

layout(set = 1, binding = 0) buffer Buffer {
	uint directional_count;
	uint point_count;
	uvec2 padding;

	Light lights[];
} lights;




float saturate(float x) {
	return min(1.0, max(0.0, x));
}

float sqr(float x) {
	return x * x;
}




float noise(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
}

vec3 group_color() {
	ivec2 coord = ivec2(gl_WorkGroupID.xy);
	return vec3(noise(coord), noise(coord.yx), noise(-coord));
}





float attenuation(float distance, float radius) {
	float x = min(distance, radius);
	return sqr(1.0 - sqr(sqr(x / radius))) / (sqr(x) + 1.0);
}


vec3 fetch_normal(sampler2D normal_tex, ivec2 coord) {
	return texelFetch(normal_tex, coord, 0).xyz * 2.0 - vec3(1.0);
}

vec3 unproject(vec2 uv, float depth, mat4 inv_matrix) {
	vec3 ndc = vec3(uv * 2.0 - vec2(1.0), depth);
	vec4 p = inv_matrix * vec4(ndc, 1.0);
	return p.xyz / p.w;
}

void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec3 acc = vec3(0.0);
	
	float depth = texelFetch(in_depth, coord, 0).x;
	vec4 diffuse = texelFetch(in_color, coord, 0);

	if(depth < 1) {
		vec3 normal = fetch_normal(in_normal, coord);

		vec3 world_pos = unproject(uv, depth, inv.matrix);

		uint i = 0;
		for(; i < lights.directional_count; i++) {
			Light light = lights.lights[i];

			float lambert = saturate(dot(normal, light.position));

			acc += lambert * light.color;
		}
		for(; i < lights.point_count; i++) {
			Light light = lights.lights[i];

			vec3 direction = world_pos - light.position;
			float distance = length(direction);
			direction /= distance;

			float att = attenuation(distance, light.radius);

			float lambert = saturate(dot(normal, direction));

			acc += lambert * att * light.color;
		}
	}
	
	imageStore(out_color, coord, /*diffuse **/ vec4(acc, 1.0));

	//imageStore(out_color, coord, vec4(group_color(), 1.0));
}


