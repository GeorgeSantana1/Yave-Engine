#version 450

#include "yave.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform Camera {
	mat4 inv_matrix;
	vec3 position;
} camera;

layout(rgba8, set = 2, binding = 0) uniform writeonly image2D out_color;


struct Light {
	vec3 position;
	float radius;
	vec3 color;
	float padding;
};

layout(set = 1, binding = 0) readonly buffer InBuffer {
	uint directional_count;
	uint point_count;
	uvec2 padding;

	Light lights[];
} lights;









vec3 group_color() {
	ivec2 coord = ivec2(gl_WorkGroupID.xy);
	return vec3(noise(coord), noise(coord.yx), noise(-coord));
}




float attenuation(float distance, float radius) {
	float x = min(distance, radius);
	return sqr(1.0 - sqr(sqr(x / radius))) / (sqr(x) + 1.0);
}

float brdf(vec3 normal, vec3 light_dir, vec3 view_dir) {
	float lambert = saturate(dot(normal, light_dir));

	vec3 half_vec = normalize(light_dir + view_dir);
	float phong = pow(saturate(dot(normal, half_vec)), 32.0);

	return lambert + phong;
}



vec3 fetch_normal(sampler2D normal_tex, ivec2 coord) {
	return texelFetch(normal_tex, coord, 0).xyz * 2.0 - vec3(1.0);
}


void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec3 acc = vec3(0.0);
	
	float depth = texelFetch(in_depth, coord, 0).x;
	vec4 diffuse = texelFetch(in_color, coord, 0);

	if(depth < 1) {
		vec3 normal = fetch_normal(in_normal, coord);

		vec3 world_pos = unproject(uv, depth, camera.inv_matrix);
		vec3 view_dir = normalize(camera.position - world_pos);

		uint i = 0;
		for(; i < lights.directional_count; ++i) {
			Light light = lights.lights[i];

			acc += light.color * brdf(normal, light.position, view_dir);
		}
		for(; i < lights.point_count; ++i) {
			Light light = lights.lights[i];

			vec3 light_dir = world_pos - light.position;
			float distance = length(light_dir);
			light_dir /= distance;

			float att = attenuation(distance, light.radius);

			acc += light.color * att * brdf(normal, light_dir, view_dir);
		}
	}
	
	imageStore(out_color, coord, /*diffuse **/ vec4(acc, 1.0));

	//imageStore(out_color, coord, vec4(group_color(), 1.0));
}


