#version 450

#include "yave.glsl"


// -------------------------------- I/O --------------------------------

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform Camera {
	mat4 inv_matrix;
	vec3 position;
	uint padding_0;
	vec3 forward;
	uint padding_1;
} camera;

layout(set = 0, binding = 4) readonly buffer InBuffer {
	uint count;
	uint directional_count;
	uint padding[2];

	Light lights[];
} lights;


layout(rgba16f, set = 0, binding = 5) uniform writeonly image2D out_color;


// -------------------------------- SHARED --------------------------------

shared uint tile_lights[max_tile_lights];
shared uint tile_light_count;

shared uint i_max_depth;
shared uint i_min_depth;



// -------------------------------- PROFILE --------------------------------

vec3 load_color() {
	float light_count = tile_light_count + lights.directional_count;
	float max_lights = lights.count + lights.directional_count;
	return vec3(light_count / max_lights);
}

vec3 group_color() {
	ivec2 coord = ivec2(gl_WorkGroupID.xy);
	return vec3(noise(coord), noise(coord.yx), noise(-coord));
}



// -------------------------------- HELPERS --------------------------------

vec3 fetch_normal(sampler2D normal_tex, ivec2 coord) {
	return texelFetch(normal_tex, coord, 0).xyz * 2.0 - vec3(1.0);
}

vec4 plane(vec3 p0, vec3 p1, vec3 p2) {
	vec3 n = normalize(cross(p0 - p1, p2 - p1));
	return vec4(-n, dot(n, p1));
}

uvec2 dispatch_range(uint num) {
	uint thread_count = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	uint range = 1 + (num / thread_count);
	uint begin = min(gl_LocalInvocationIndex * range, num);
	uint end = min(begin + range, num);
	return uvec2(begin, end);
}



// -------------------------------- CULLING --------------------------------

void build_depth_bounds(float depth) {
	uint i_depth = float_to_uint(depth);
	uint im_depth = i_depth >= max_uint - 1 ? 0 : i_depth;
	atomicMax(i_max_depth, im_depth);
	atomicMin(i_min_depth, i_depth);
}

Frustum build_group_frustum() {

	vec3 top_left = unproject_ndc(vec3(-1.0, 1.0, -1.0), camera.inv_matrix);
	vec3 bot_left = unproject_ndc(vec3(-1.0, -1.0, -1.0), camera.inv_matrix);
	vec3 bot_right = unproject_ndc(vec3(1.0, -1.0, -1.0), camera.inv_matrix);

	vec3 x_step = (bot_right - bot_left) / gl_NumWorkGroups.x;
	vec3 y_step = (top_left - bot_left) / gl_NumWorkGroups.y;

	vec3 tile_bot_left  = bot_left + x_step *  gl_WorkGroupID.x      + y_step *  gl_WorkGroupID.y;
	vec3 tile_bot_right = bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step *  gl_WorkGroupID.y;
	vec3 tile_top_left  = bot_left + x_step *  gl_WorkGroupID.x      + y_step * (gl_WorkGroupID.y + 1);
	vec3 tile_top_right = bot_left + x_step * (gl_WorkGroupID.x + 1) + y_step * (gl_WorkGroupID.y + 1);

	vec3 cam_pos = camera.position;
	vec3 cam_fwd = camera.forward;

	float min_depth = uint_to_float(i_min_depth);
	float max_depth = uint_to_float(i_max_depth);
	vec3 near = unproject_ndc(vec3(0.0, 0.0, min_depth), camera.inv_matrix);
	vec3 far = unproject_ndc(vec3(0.0, 0.0, max_depth), camera.inv_matrix);

	Frustum frustum;
	frustum.planes[0] = plane(cam_pos, tile_top_left, tile_bot_left);
	frustum.planes[1] = plane(cam_pos, tile_bot_right, tile_top_right);
	frustum.planes[2] = plane(cam_pos, tile_top_right, tile_top_left);
	frustum.planes[3] = plane(cam_pos, tile_bot_left, tile_bot_right);

	frustum.planes[4] = vec4(cam_fwd, dot(far, cam_fwd));
	frustum.planes[5] = vec4(cam_fwd, dot(near, cam_fwd));

	return frustum;
}

void cull_lights(float depth) {
	if(gl_LocalInvocationIndex == 0) {
		tile_light_count = 0;
		i_max_depth = 0;
		i_min_depth = max_uint;
	}

	barrier();
	{
		build_depth_bounds(depth);
	}
	barrier();
	{
		Frustum tile_frustum = build_group_frustum();
		uvec2 range = dispatch_range(lights.count);

		for(uint i = range.x; i != range.y; ++i) {
			if(is_inside(tile_frustum, lights.lights[i].position, lights.lights[i].radius)) {
				uint light_index = atomicAdd(tile_light_count, 1);
				tile_lights[light_index] = i;
			}
		}
	}
	barrier();
}



// -------------------------------- MAIN --------------------------------

//#define PROFILE
//#define LIGHT_ONLY

void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec3 acc = vec3(0.0);

	float depth = texelFetch(in_depth, coord, 0).x;


	cull_lights(depth);


#ifndef LIGHT_ONLY
	vec4 albedo = texelFetch(in_color, coord, 0);
#else
	vec4 albedo = vec4(1.0);
#endif


	if(depth < 1) {
		vec3 normal = fetch_normal(in_normal, coord);

		vec3 world_pos = unproject(uv, depth, camera.inv_matrix);
		vec3 view_dir = normalize(camera.position - world_pos);

		for(uint i = 0, end = tile_light_count; i != end; ++i) {
			Light light = lights.lights[tile_lights[i]];

			vec3 light_dir = light.position - world_pos;
			float distance = length(light_dir);
			light_dir /= distance;
			float att = attenuation(distance, light.radius);

			acc += light.color * att * albedo.xyz * brdf(normal, light_dir, view_dir);
		}

		for(uint i = lights.count, end = lights.count + lights.directional_count; i != end; ++i) {
			Light light = lights.lights[i];
			acc += light.color * albedo.xyz * brdf(normal, light.position, view_dir);
		}
	}

#ifdef PROFILE
	imageStore(out_color, coord, vec4(load_color(), 1.0));
#else
	imageStore(out_color, coord, vec4(acc, 1.0));
#endif
}


