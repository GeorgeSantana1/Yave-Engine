#version 450

#include "yave.glsl"

const uint group_size = 8;
const uint thread_count = group_size * group_size;

layout(local_size_x = group_size, local_size_y = group_size) in;

layout(r32ui, set = 0, binding = 0) uniform uimage2D out_histogram;
layout(set = 0, binding = 1) uniform sampler2D in_color;

shared uint histogram[thread_count];


uint lum_to_bin(float lum) {
	float log_lum = log2(lum) + 16.0;
	if(log_lum <= 0.0) {
		return 0;
	}
	return min(thread_count - 1, uint(log_lum));
}

// https://bruop.github.io/exposure/
void main() {
	uint index = gl_LocalInvocationIndex;
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = textureSize(in_color, 0);

	float lum = luminance(texelFetch(in_color, coord, 0).rgb);
	uint bin = lum_to_bin(lum);

	histogram[index] = 0;

	barrier();

	if(coord.x <= size.x && coord.y <= size.y) {
		atomicAdd(histogram[bin], 1);
	}

	barrier();

	imageAtomicAdd(out_histogram, ivec2(index, 0), histogram[index]);
}

