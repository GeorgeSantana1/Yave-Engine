#version 450

#include "yave.glsl"

layout(local_size_x = 1, local_size_y = 1) in;

layout(set = 0, binding = 0) readonly buffer InBuffer {
	uint count;
	uint padding[3];

	Light lights[];
} in_buffer;

layout(set = 0, binding = 1) writeonly buffer OutBuffer {
	uint count;
	uint padding[3];

	Light lights[];
} out_buffer;

layout(set = 0, binding = 2) uniform FrustumBuffer {
	Frustum frustum;
} frustum;




void main() {
	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if(index == 0) {
		atomicExchange(out_buffer.count, 0);
	}

	if(index < in_buffer.count) {
		Frustum frustum = frustum.frustum;
		Light light = in_buffer.lights[index];
		if(light.type == DirectionalLight || is_inside(frustum, light.position, light.radius)) {
			out_buffer.lights[atomicAdd(out_buffer.count, 1)] = in_buffer.lights[index];
		}
	}
}






