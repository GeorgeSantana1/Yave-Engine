#version 450

#include "yave.glsl"

// -------------------------------- DEFINES --------------------------------

//#define USE_IBL

// -------------------------------- I/O --------------------------------

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform samplerCube in_envmap;
layout(set = 0, binding = 4) uniform sampler2D brdf_lut;

layout(rgba16f, set = 0, binding = 6) uniform writeonly image2D out_color;


layout(set = 0, binding = 5) readonly buffer Lights {
	DirectionalLight lights[];
} lights;

layout(push_constant) uniform PushConstants {
	LightingCamera camera;
	uint light_count;
} constants;


// -------------------------------- MAIN --------------------------------

void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

	float depth = texelFetch(in_depth, coord, 0).x;
	vec3 irradiance = vec3(0.0);

	if(!is_OOB(depth)) {
		vec3 albedo;
		float metallic;
		vec3 normal;
		float roughness;
		unpack_color(texelFetch(in_color, coord, 0), albedo, metallic);
		unpack_normal(texelFetch(in_normal, coord, 0), normal, roughness);

		vec3 world_pos = unproject(uv, depth, constants.camera.inv_matrix);
		vec3 view_dir = normalize(constants.camera.position - world_pos);

		// directional lights
		for(uint i = 0; i != constants.light_count; ++i) {
			DirectionalLight light = lights.lights[i];

			vec3 light_dir = light.direction; // assume normalized

			vec3 radiance = light.color;
			irradiance += radiance * L0(normal, light_dir, view_dir, roughness, metallic, albedo);
		}

#ifdef USE_IBL
		irradiance += ibl_irradiance(in_envmap, brdf_lut, normal, view_dir, roughness, metallic, albedo);
	} else {
		vec3 forward = normalize(unproject(uv, 1.0, constants.camera.inv_matrix) - constants.camera.position);
		irradiance = texture(in_envmap, forward).rgb;
#endif
	}
	imageStore(out_color, coord, vec4(irradiance, 1.0));
}


