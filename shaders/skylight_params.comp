#version 450

#include "yave.glsl"
#include "sky.glsl"
#include "screen_space.glsl"

const uint group_size = 8;
const uint thread_count = group_size * group_size;

layout(local_size_x = group_size, local_size_y = group_size) in;

layout(set = 0, binding = 0) uniform CameraData {
	Camera camera;
};

layout(set = 0, binding = 1) uniform RayleighSkyData {
	RayleighSky sky;
};

layout(set = 0, binding = 2) writeonly buffer SkyLightData {
	SkyLight light;
};

shared SH sky_sh[thread_count];

void main() {
	const uint index = gl_LocalInvocationIndex;
	const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	const vec3 direction = index == 0 ? sky.sun_direction : sample_dir(index);

	const vec3 color = rayleigh(camera.position.z + sky.base_height,
								direction,
								sky.atmo_height,
								sky.planet_height,
								sky.sun_direction,
								sky.beta_rayleigh) * sky.sun_color;

	sky_sh[index] = compute_sh(color, -direction);

	barrier();

	for(uint i = 1; i < thread_count; i <<= 1) {
		if(index + i < thread_count) {
			sky_sh[index] = add_sh(sky_sh[index], sky_sh[index + i]);
		}
		barrier();
	}

	if(index == 0) {
		light.sun_direction = sky.sun_direction;
		light.sun_color = color;
		light.sh = sky_sh[0];
	}
}

