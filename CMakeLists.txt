cmake_minimum_required(VERSION 3.6)
project(yave)

include_directories(${yave_SOURCE_DIR})




set(ULTIMATE_WARNINGS "-Wdisabled-optimization -Wlogical-op -Wwrite-strings -Wmissing-include-dirs -Wredundant-decls -Wsign-promo -Wswitch-default -Wundef")
set(EXTRA_WARNINGS "-Woverloaded-virtual -Wcast-qual -Wcast-align -Wunreachable-code -Wold-style-cast -Wuseless-cast -Wnon-virtual-dtor -Wodr")
# no -Wzero-as-null-pointer-constant because of VK_NULL_HANDLE

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

add_definitions("${EXTRA_WARNINGS}")
add_definitions("${ULTIMATE_WARNINGS}")
add_definitions("-std=c++17 -pedantic -Wall -Wextra")



file(GLOB_RECURSE SOURCE_FILES
		"YaveApp.cpp"
		"YaveApp.h"

		"yave/*.h"
		"yave/*.cpp"
	)

# Shader files, they are here so the IDE can find them
file(GLOB_RECURSE SHADER_FILES
		"shaders/*.frag"
		"shaders/*.vert"
		"shaders/*.geom"
		"shaders/*.comp"
		"shaders/*.glsl"
	)


# y lib, change this to wherever it it
include_directories(../y)
link_directories(../y/build)




function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
	set(files ${${SOURCE_VARIABLE_NAME}})

	# Generate a unique filename for the unity build translation unit
	set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)

	# Exclude all translation units from compilation
	set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)

	# Open the ub file
	FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")

	# Add include statement for each translation unit
	foreach(source_file ${files})
		FILE(APPEND ${unit_build_file} "#include <${source_file}>\n")
	endforeach(source_file)

	# Complement list of translation units with the name of ub
	set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)
endfunction(enable_unity_build)


option(USE_UNITY_BUILD "Use unity build" OFF)
option(BUILD_LIB "Build library" ON)


if(USE_UNITY_BUILD)
	message("Unity build enabled")
	enable_unity_build(yave SOURCE_FILES)
endif()


# if we are not building libyave add main.cpp and build the exec
if(BUILD_LIB)
	message("Building libyave")
	add_library(yave STATIC ${SOURCE_FILES} ${SHADER_FILES})
else()
	add_executable(yave "main.cpp" ${SOURCE_FILES} ${SHADER_FILES})
endif()


# add the defines, link the libs
if(WIN32)
	target_compile_definitions(yave PRIVATE -DWIN32)
endif()

target_link_libraries(yave y)
target_link_libraries(yave vulkan-1)
target_link_libraries(yave spirv-cross)


# if we are building the lib: create an exec that links it
if(BUILD_LIB)
	add_executable(main "main.cpp")
	target_link_libraries(main yave)
endif()




